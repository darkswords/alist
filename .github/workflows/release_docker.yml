name: release_docker

on:
  workflow_dispatch:

env:
  REGISTRY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME || github.repository_owner }}
  REGISTRY: ${{ secrets.DOCKERHUB_REPO || format('{0}/alist', secrets.DOCKERHUB_USERNAME || github.repository_owner) }}
  REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  ARTIFACT_NAME: 'binaries_docker_release'
  RELEASE_PLATFORMS: 'linux/amd64,linux/arm64,linux/arm/v7,linux/386,linux/arm/v6,linux/s390x,linux/ppc64le,linux/riscv64'
  IMAGE_PUSH: ${{ github.event_name == 'push' }}
  IMAGE_IS_PROD: ${{ github.ref_type == 'tag' }}

jobs:
  build_binary:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # 省略其他步骤...

  release_docker:
    needs: build_binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ["latest", "ffmpeg", "aria2", "aio"]
        include:
          - image: "latest"
            build_arg: ""
            tag_favor: ""
          - image: "ffmpeg"
            build_arg: INSTALL_FFMPEG=true
            tag_favor: "suffix=-ffmpeg,onlatest=true"
          - image: "aria2"
            build_arg: INSTALL_ARIA2=true
            tag_favor: "suffix=-aria2,onlatest=true"
          - image: "aio"
            build_arg: |
              INSTALL_FFMPEG=true
              INSTALL_ARIA2=true
            tag_favor: "suffix=-aio,onlatest=true"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: 'build/'

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: env.IMAGE_PUSH == 'true'
        uses: docker/login-action@v3
        with:
          logout: true
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}
          tags: ${{ env.IMAGE_IS_PROD == 'true' && '' || 'beta' }}

      - id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.ci
          push: ${{ env.IMAGE_PUSH == 'true' }}
          build-args: ${{ matrix.build_arg }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ env.RELEASE_PLATFORMS }}
